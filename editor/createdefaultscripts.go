// Copyright 2015 Hajime Hoshi
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"io/ioutil"
	"fmt"
	"strings"
	"os"
)

const tmpl = `// Generated by createdefaultscript.go: DO NOT EDIT

namespace editor {
    export const defaultScripts: data.Script[] = [
%s
    ];
}
`

func names(file string) ([]string, error) {
	c, err := ioutil.ReadFile(file)
	if err != nil {
		return nil, err
	}
	names := []string{}
	for _, line := range strings.Split(string(c), "\n") {
		name := strings.TrimSpace(line)
		if name == "" {
			continue
		}
		names = append(names, name)
	}
	return names, nil
}

func toFile(name string) string {
	f := name
	f = strings.Replace(f, " ", "", -1)
	f = strings.ToLower(f)
	return "defaultscripts/" + f + ".ts"
}

var stringLiteralContentReplacer = strings.NewReplacer(
	"\\", "\\\\",
	"\"", "\\\"",
	"'", "\\'",
	"\n", "\\n",
	"\r", "\\r",
	"\u2028", "\\u2028",
	"\u2029", "\\u2029")

func toStringLiteral(s string) string {
	return stringLiteralContentReplacer.Replace(s)
}

func main() {
	names, err := names(os.Args[1])
	if err != nil {
		panic(err)
	}

	scripts := map[string]string{}
	for _, name := range names {
		file := toFile(name)
		script, err := ioutil.ReadFile(file)
		if err != nil {
			panic(err)
		}
		scripts[name] = string(script)
	}

	scriptLiterals := []string{}
	for _, name := range names {
		script := scripts[name]
		tmpl := `
        {
            name:    "%s",
            content: "%s",
        }`[1:]
		scriptLiterals = append(scriptLiterals, fmt.Sprintf(tmpl, toStringLiteral(name), toStringLiteral(script)))
	}

	fmt.Printf(tmpl, strings.Join(scriptLiterals, ",\n"))
}
